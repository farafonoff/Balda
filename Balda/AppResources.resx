<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Alphabet" xml:space="preserve">
    <value>abcdefghijklmnopqrstuvwxyz</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>Balda</value>
  </data>
  <data name="cfDemoText" xml:space="preserve">
    <value>Current game will be lost. Continue?</value>
  </data>
  <data name="cfDemoTitle" xml:space="preserve">
    <value>Demonstration</value>
  </data>
  <data name="cfRestartText" xml:space="preserve">
    <value>Really want restart game?</value>
  </data>
  <data name="cfRestartTitle" xml:space="preserve">
    <value>Replay</value>
  </data>
  <data name="fcfNearText" xml:space="preserve">
    <value>Put new letter near existing, and select word containing it</value>
  </data>
  <data name="fcfNearTitle" xml:space="preserve">
    <value>Put letters near others</value>
  </data>
  <data name="fgAgain" xml:space="preserve">
    <value>Play again</value>
  </data>
  <data name="fgcfAddText" xml:space="preserve">
    <value>Save it to dictionary?</value>
  </data>
  <data name="fgcfAddTitle" xml:space="preserve">
    <value>Word not in dictionary</value>
  </data>
  <data name="fgcfUsedText" xml:space="preserve">
    <value>You can't use words more than once</value>
  </data>
  <data name="fgcfUsedTitle" xml:space="preserve">
    <value>Word already used in the game</value>
  </data>
  <data name="fgDraw" xml:space="preserve">
    <value>Tie game</value>
  </data>
  <data name="fgMiss" xml:space="preserve">
    <value>Miss a turn</value>
  </data>
  <data name="fgPlayer" xml:space="preserve">
    <value>Player: </value>
  </data>
  <data name="fgScore" xml:space="preserve">
    <value>Score: </value>
  </data>
  <data name="fgWinner" xml:space="preserve">
    <value>Winner</value>
  </data>
  <data name="fgWScore" xml:space="preserve">
    <value>Score</value>
  </data>
  <data name="gm1" xml:space="preserve">
    <value>Single player</value>
  </data>
  <data name="gm2" xml:space="preserve">
    <value>Two players (hotseat)</value>
  </data>
  <data name="hdEasy" xml:space="preserve">
    <value>Easy</value>
  </data>
  <data name="hdFull" xml:space="preserve">
    <value>Nightmare</value>
  </data>
  <data name="hdHard" xml:space="preserve">
    <value>Hard</value>
  </data>
  <data name="hdMedium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="mGame" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="mmAbout" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="mmDemo" xml:space="preserve">
    <value>Demonstration</value>
  </data>
  <data name="mmRestart" xml:space="preserve">
    <value>Restart</value>
  </data>
  <data name="mmScoreboard" xml:space="preserve">
    <value>Scoreboard</value>
  </data>
  <data name="mmSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="mWords" xml:space="preserve">
    <value>Words</value>
  </data>
  <data name="pgSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="stHardness" xml:space="preserve">
    <value>Difficulty</value>
  </data>
  <data name="stLang" xml:space="preserve">
    <value>Game language</value>
  </data>
  <data name="stMode" xml:space="preserve">
    <value>Game mode</value>
  </data>
  <data name="stUn1" xml:space="preserve">
    <value>Your name</value>
  </data>
  <data name="stUn2" xml:space="preserve">
    <value>Second player name</value>
  </data>
  <data name="tPhone" xml:space="preserve">
    <value>phone</value>
  </data>
  <data name="wbNearText" xml:space="preserve">
    <value>Select side neighbour cells to make word, than tap selected letter again to confirm word</value>
  </data>
  <data name="wbNearTitle" xml:space="preserve">
    <value>Letters must be neighbours by side</value>
  </data>
  <data name="wbUnusedNewText" xml:space="preserve">
    <value>You must use added letter in your word</value>
  </data>
  <data name="wbUnusedNewTitle" xml:space="preserve">
    <value>New letter isn't used!</value>
  </data>
  <data name="hp0" xml:space="preserve">
    <value>The game starts with a 5x5 square table with a 5 letter word written in the middle row.</value>
  </data>
  <data name="hp2" xml:space="preserve">
    <value>The new word must be a noun and must not be a form of any of ones appeared earlier.</value>
  </data>
  <data name="hp3" xml:space="preserve">
    <value>The player increases its score for the number of letters in the word.</value>
  </data>
  <data name="hp1" xml:space="preserve">
    <value>Each turn one of the players adds one letter and determines a sequence of letters from the table (including the new one) without repetitions which represent a word.</value>
  </data>
  <data name="mmHelp" xml:space="preserve">
    <value>Game rules</value>
  </data>
  <data name="purchase" xml:space="preserve">
    <value>Purchase and remove banner</value>
  </data>
  <data name="plFriend" xml:space="preserve">
    <value>Friend</value>
  </data>
  <data name="plYou" xml:space="preserve">
    <value>You</value>
  </data>
  <data name="dCurrent" xml:space="preserve">
    <value>This game</value>
  </data>
  <data name="dDel" xml:space="preserve">
    <value>Delete checked</value>
  </data>
  <data name="dictionary" xml:space="preserve">
    <value>Dictionary</value>
  </data>
  <data name="dUserDict" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="stSize" xml:space="preserve">
    <value>Field size</value>
  </data>
  <data name="dSend" xml:space="preserve">
    <value>Send dictionary to developer</value>
  </data>
  <data name="mmScore" xml:space="preserve">
    <value>My scoreboard</value>
  </data>
  <data name="sbLongestWord" xml:space="preserve">
    <value>Longest word</value>
  </data>
  <data name="sbScore" xml:space="preserve">
    <value>Score</value>
  </data>
</root>